# idea of this file is:
# a) step files of screws are placed in a true folder
# b) step files of non_screw_parts are placed in a false folder
# dataset is generated by transformation via point_cloud to numpy array
import os.path
import numpy as np
from src.point_cloud.stl_to_multiview import stl_to_multiview
from build_dictionaries import make_screw_gt_dictionary


def build_dataset(path, num_views=3, view_size=80, chunk_size=100):  # saving every chunk_size samples reduces memory usage
    data = []
    labels = []
    dict_path = make_screw_gt_dictionary(path, 'screw', 'no_screw')
    data_file = os.path.join(path, 'data.npy')
    label_file = os.path.join(path, 'labels.npy')

    # delete old files
    if os.path.exists(data_file):
        os.remove(data_file)
    if os.path.exists(label_file):
        os.remove(label_file)

    with open(dict_path, mode='r') as file:
        sample_count = 0
        chunk_index = 0
        lines = file.readlines()
        for i in range(len(lines)):
            li = lines[i]
            print("sample " + str(i) + " of " + str(len(lines)))
            # line = li.split(',')            # cannot use split(',') since some file names contain this symbol
            # p = os.path.abspath()
            p = li[:-3]                       # remove 0 or 1 and ,
            classification = li[-2]
            for view in stl_to_multiview(p.removesuffix('"').removeprefix('"'), view_size):
                if view is not None:
                    data.append(view)
                    labels.append(int(classification))
            sample_count += 1

            # for reasons of low memory only keep chunk in memory
            if sample_count >= chunk_size:
                # convert to numpy
                data = np.array(data)
                labels = np.array(labels)

                # create files
                if chunk_index == 0:
                    np.save(data_file, data)
                    np.save(label_file, labels)
                else:
                    # append chunk
                    with open(data_file, 'ab') as f_data:
                        np.save(f_data, data)
                    with open(label_file, 'ab') as f_labels:
                        np.save(f_labels, labels)

                # free memory
                data = []
                labels = []
                sample_count = 0
                chunk_index += 1

    # save remainder
    if sample_count > 0:
        data = np.array(data)
        labels = np.array(labels)
        with open(data_file, 'ab') as f_data:
            np.save(f_data, data)
        with open(label_file, 'ab') as f_labels:
            np.save(f_labels, labels)

    return data, labels


build_dataset("../../data/convert/gt/screw_or_not/")

